service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments

# Enable individual packaging for better performance of each lambda function
# package:
#   individually: true

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}

  # More details on how to enable AWS X-Ray for distributed tracing, see:
  # https://www.youtube.com/watch?v=Qj1w2Qbt99o & https://www.youtube.com/watch?v=QTlB32T6cVg & https://www.youtube.com/watch?v=dv9EZRGhMX4
  tracing:
    lambda: true
    apiGateway: true

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    USER_AND_DUE_DATE_INDEX_NAME: UserAndDueDateIndex
    IMAGES_S3_BUCKET: serverless-todo-app-543264-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    JWKS_URL: https://modul1-udacity-todo-app-dev.eu.auth0.com/.well-known/jwks.json

custom:
#  serverless-offline:
#    port: 3003
#
#  dynamodb:
#    start:
#      port: 8000
#      inMemory: true
#      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: Todo App API
        description: Serverless application for managing your todos
    # models are used for request validation with the RequestBodyValidator, see plugin above and config below and
    # https://www.serverless.com/plugins/serverless-reqvalidator-plugin/
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-request.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Effect: Allow
        Resource: "*"

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Action:
          - dynamodb:Query
        Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Action:
          - dynamodb:Query
        Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_AND_DUE_DATE_INDEX_NAME}
      - Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Effect: Allow
        Resource: "*"
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new todo
            description: Simplistic todo creation
            requestModels:
              'application/json': CreateTodoRequest
    iamRoleStatements:
      - Action:
          - dynamodb:PutItem
        Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Effect: Allow
        Resource: "*"
#    deploymentSettings:
#      type: Linear10PercentEvery1Minute
#      alias: Live

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update a new todo
            description: Updating a simple todo with limited functionality
            requestModels:
              'application/json': UpdateTodoRequest
    iamRoleStatements:
      - Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Effect: Allow
        Resource: "*"

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Effect: Allow
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Action:
          - s3:PutObject
          - s3:GetObject
        Effect: Allow
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*
      - Action:
          - dynamodb:GetItem
        Effect: Allow
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Effect: Allow
        Resource: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    TodosTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: creatorUserId
            AttributeType: S
          - AttributeName: dueDate
            AttributeType: S
        KeySchema:
          - AttributeName: creatorUserId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_AND_DUE_DATE_INDEX_NAME}
            KeySchema:
              - AttributeName: creatorUserId
                KeyType: HASH
              - AttributeName: dueDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ImagesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
        Bucket: !Ref ImagesBucket